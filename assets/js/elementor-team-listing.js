/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/admin/elementor-team-listing.js":
/*!************************************************!*\
  !*** ./src/js/admin/elementor-team-listing.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _module_custom_admin_notice__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./module-custom-admin-notice */ \"./src/js/admin/module-custom-admin-notice.js\");\n\r\n\r\n/**\r\n * Initialize global variables\r\n */\r\nconst elementor = window.elementor;\r\nconst $ = window.jQuery;\r\nconst ajaxurl = window.ajaxurl;\r\nconst $e = window.$e;\r\n\r\n/**\r\n * Action automatically triggered when the 'team_listing_widget' panel is activated\r\n */\r\nelementor.hooks.addAction('panel/open_editor/widget/team_listing_widget', function (panel, model, view) {\r\n    let lastClickedTemplateTabBtn;\r\n\r\n    /**\r\n     * HELPER FOR TEMPLATES\r\n     */\r\n    const templatesHelper = {\r\n\r\n        /**\r\n         * Displays a notice inside the TEMPLATE CONTROL TAB\r\n         *\r\n         * @param noticeType\r\n         * @param noticeMsg\r\n         */\r\n        showTemplateNotice: (noticeType, noticeMsg) => {\r\n            const controlView = getControlView('template_admin_notice');\r\n            (0,_module_custom_admin_notice__WEBPACK_IMPORTED_MODULE_0__.displayNotice)(controlView.$el, noticeMsg, noticeType, true);\r\n        },\r\n\r\n        /**\r\n         * Updates the list of templates\r\n         *\r\n         * @param array templates\r\n         * @param string newSelectedValue\r\n         * @return void\r\n         */\r\n        updateTemplatesList: (templates, newSelectedValue = '') => {\r\n\r\n            const controlView = getControlView('chosen_template');\r\n            const controlModel = controlView.model;\r\n            const $control = controlView.$el.find('select');\r\n\r\n            // Gets the current selected valueToBeSelected\r\n            const currentSelectedValue = controlView.getControlValue();\r\n\r\n            // Clears the select control\r\n            controlModel.set('options', {});\r\n            controlView.setValue('');\r\n\r\n            if (!templates || !templates.length) {\r\n                return;\r\n            }\r\n\r\n            // set the new select options\r\n            let valueToBeSelected = newSelectedValue ? newSelectedValue : currentSelectedValue;\r\n            let selectOptions = {};\r\n\r\n            templates.forEach(template => {\r\n                selectOptions[template] = template;\r\n            });\r\n\r\n            controlModel.set('options', selectOptions);\r\n\r\n            // set the selected option\r\n            // Checks if the value to be selected exists in the new options\r\n            // - if 'yes' then use that value\r\n            // - if 'no' then use the first value of the option list\r\n            const finalSelectedValue = (!~templates.indexOf(valueToBeSelected)) ? templates[0] : valueToBeSelected;\r\n            controlView.setValue(finalSelectedValue)\r\n\r\n            // reflect the changes in the browser\r\n            controlView.render();\r\n\r\n        },\r\n\r\n        /**\r\n         * Enable or disable editing controls inside the template tab\r\n         *\r\n         * @param boolean enabled\r\n         */\r\n        enableTemplateEditing(enabled = true) {\r\n            const $pendingEl = $('.elementor-control-template_pending');\r\n            if (!$pendingEl.length) {\r\n                return;\r\n            }\r\n\r\n            const btnSaveView = getControlView('template_btn_save');\r\n            const $btn = btnSaveView.$el;\r\n            if (!$btn.length) {\r\n                return;\r\n            }\r\n\r\n            const pendingElOffset = $pendingEl.offset();\r\n            const btnOffset = $btn.offset();\r\n            const height =\r\n                btnOffset.top -\r\n                pendingElOffset.top +\r\n                $btn.height() +\r\n                parseInt($pendingEl.css('padding-top')) +\r\n                parseInt($pendingEl.css('padding-bottom')) +\r\n                20;\r\n\r\n            $pendingEl.css('height', height + 'px');\r\n\r\n            if (!enabled) {\r\n                $pendingEl.addClass('is-pending spinner');\r\n            } else {\r\n                $pendingEl.removeClass('is-pending spinner');\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Changes the value of a control and the model at the same time\r\n     *\r\n     * This is a sort of hack because model.setSetting(..) or\r\n     * model.attribute.settings.set(..) seems not working because\r\n     * it does not refresh the content of the control. It seems that\r\n     * it only initializes the control value.\r\n     *\r\n     * @param key\r\n     * @param value\r\n     */\r\n    function setControlValue(key, value) {\r\n        const controlView = getControlView(key);\r\n        controlView.setValue(value);\r\n        controlView.render();\r\n    }\r\n\r\n    /**\r\n     * Digs in the panel and returns the control associated to 'controlName'\r\n     *\r\n     * @param controlName\r\n     * @returns {*}\r\n     */\r\n    function getControlView(controlName) {\r\n        const controlView = panel.currentPageView.getControlViewByName(controlName);\r\n\r\n        return controlView;\r\n    }\r\n\r\n    function createPreviewButton() {\r\n        const panel = document.querySelector('#elementor-panel');\r\n        const previewBtn = document.createElement('div');\r\n        previewBtn.setAttribute('class', 'team-preview-button');\r\n        previewBtn.innerHTML = `<button class=\"elementor-button elementor-button-default\" type=\"button\">PREVIEW CHANGES</button>`;\r\n\r\n        const panelContainer = panel.querySelector(\"#elementor-panel-page-editor\");\r\n        panelContainer.prepend(previewBtn);\r\n        panelContainer.appendChild(previewBtn.cloneNode(true));\r\n\r\n    }\r\n\r\n    function setPanelNavigationEvent() {\r\n        const panel = document.querySelector('#elementor-panel');\r\n        const panelNavigationEl = panel.querySelector(\".elementor-panel-navigation\");\r\n        const panelNavigationEvent = e => {\r\n            const target = e.target.parentElement;\r\n\r\n            if ((target.classList.contains('elementor-component-tab')) &&\r\n                (!target.classList.contains('elementor-active'))) {\r\n                setPanelNavigationEvent();\r\n                createPreviewButton();\r\n            }\r\n        };\r\n\r\n        panelNavigationEl.addEventListener('click', panelNavigationEvent);\r\n    }\r\n\r\n    /**\r\n     * Click event on the panel\r\n     *\r\n     * Uses 'event delegation' to handle clicks on elements\r\n     * contained inside the panel.\r\n     *\r\n     * @param e\r\n     */\r\n    function panelOnClick(e) {\r\n        const target = e.target;\r\n\r\n        /**\r\n         * Checks if the edit button of the template tab is clicked and processes it\r\n         *\r\n         * @param target\r\n         * @returns {boolean} // true if processed\r\n         */\r\n        function editTemplateTab_processClickOn(target) {\r\n            let processed = false;\r\n\r\n            if (target.classList.contains('elementor-panel-tab-heading')) {\r\n\r\n                const $tabContainerBtn = $(target).closest('.elementor-control-edit_template_tab');\r\n\r\n                if ($tabContainerBtn.length > 0) {\r\n                    const activeTabBtn = ($tabContainerBtn[0] === lastClickedTemplateTabBtn);\r\n\r\n                    if (!activeTabBtn) {\r\n\r\n                        /*\r\n                         * Populate template fields\r\n                         */\r\n                        const template_name = decodeURIComponent(model.getSetting('chosen_template'));\r\n\r\n                        // initialize content first\r\n                        setControlValue('template_name', template_name);\r\n                        setControlValue('template_container', '');\r\n                        setControlValue('template_item', '');\r\n\r\n                        if (!template_name) {\r\n                            return;\r\n                        }\r\n\r\n                        templatesHelper.enableTemplateEditing(false);\r\n\r\n                        // send ajax request to the server\r\n                        const $request = $.ajax({\r\n                            url: ajaxurl,\r\n                            method: 'POST',\r\n                            data: {\r\n                                action: 'elementor_team_listing_get_template',\r\n                                template_name: template_name\r\n                            },\r\n                        });\r\n\r\n                        $request.done(function (response) {\r\n\r\n                            // get ajax request and populate the fields with data\r\n                            if (response.success) {\r\n                                setControlValue('template_name', template_name);\r\n                                setControlValue('template_container', response.container);\r\n                                setControlValue('template_item', response.item);\r\n                            } else {\r\n                                const message = response.message;\r\n                                templatesHelper.showTemplateNotice(\r\n                                    'notice-error',\r\n                                    message\r\n                                );\r\n\r\n                                setControlValue('template_name', '');\r\n                                setControlValue('template_container', '');\r\n                                setControlValue('template_item', '');\r\n                            }\r\n\r\n                            templatesHelper.enableTemplateEditing(true);\r\n                        });\r\n\r\n                        processed = true;\r\n                    }\r\n                }\r\n\r\n                lastClickedTemplateTabBtn = $tabContainerBtn[0];\r\n\r\n            }\r\n\r\n            return processed;\r\n        }\r\n\r\n        /**\r\n         * Checks if the save template button is clicked and processes it\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        function editTemplateTab_processClickOnSaveBtn() {\r\n            let process = false;\r\n\r\n            if ((target.classList.contains('elementor-button')) &&\r\n                ($(target).closest('.elementor-control-template_btn_save').length > 0)) {\r\n                const template_name = model.getSetting('template_name');\r\n                const template_container = model.getSetting('template_container');\r\n                const template_item = model.getSetting('template_item');\r\n                const template_nonce = model.getSetting('template_nonce');\r\n\r\n                templatesHelper.enableTemplateEditing(false);\r\n\r\n                const $request = $.ajax({\r\n                    url: ajaxurl,\r\n                    method: 'POST',\r\n                    data: {\r\n                        action: 'elementor_team_listing_update_template',\r\n                        template_name: template_name,\r\n                        template_container: template_container,\r\n                        template_item: template_item,\r\n                        template_nonce: template_nonce,\r\n                    },\r\n                });\r\n\r\n                $request.done(function (response) {\r\n\r\n                        let noticeType;\r\n                        let noticeMsg = response.message;\r\n\r\n                        if (response.success) {\r\n                            noticeType = 'notice-success';\r\n\r\n                            templatesHelper.updateTemplatesList(response.templates);\r\n                            setControlValue('template_nonce', response.template_nonce);\r\n                        } else {\r\n                            noticeType = 'notice-error';\r\n                        }\r\n\r\n                        templatesHelper.showTemplateNotice(noticeType, noticeMsg);\r\n\r\n                        templatesHelper.enableTemplateEditing(true);\r\n                    }\r\n                );\r\n\r\n                process = true;\r\n            }\r\n\r\n            return process;\r\n        }\r\n\r\n        /**\r\n         * Checks if the remove template button is clicked and then processes it\r\n         *\r\n         * @returns {boolean}\r\n         */\r\n        function editTemplateTab_processClickOnRemoveBtn() {\r\n            let process = false;\r\n            if ((target.classList.contains('elementor-button')) &&\r\n                ($(target).closest('.elementor-control-template_btn_remove').length > 0)) {\r\n                const template_name = model.getSetting('template_name');\r\n                const template_nonce = model.getSetting('template_nonce');\r\n\r\n                templatesHelper.enableTemplateEditing(false);\r\n\r\n                const $request = $.ajax({\r\n                    url: ajaxurl,\r\n                    method: 'POST',\r\n                    data: {\r\n                        action: 'elementor_team_listing_delete_template',\r\n                        template_name: template_name,\r\n                        template_nonce: template_nonce,\r\n                    },\r\n                });\r\n\r\n                // executed if the ajax request is ok\r\n                $request.done(function (response) {\r\n                    let noticeType, nonce;\r\n                    let noticeMsg = response.message;\r\n\r\n                    if (response.success) {\r\n                        noticeType = 'notice-success';\r\n\r\n                        templatesHelper.updateTemplatesList(response.templates);\r\n                        setControlValue('template_nonce', response.template_nonce);\r\n\r\n                    } else {\r\n                        noticeType = 'notice-error';\r\n                    }\r\n\r\n                    templatesHelper.showTemplateNotice(\r\n                        noticeType,\r\n                        noticeMsg\r\n                    );\r\n\r\n                    // reset all values\r\n                    setControlValue('template_name', '');\r\n                    setControlValue('template_container', '');\r\n                    setControlValue('template_item', '');\r\n\r\n                    templatesHelper.enableTemplateEditing(true);\r\n\r\n                    // go back to the 'choose template' tab\r\n                    // simulates a click event\r\n                    const controlView = getControlView('use_template_tab');\r\n                    const $controlTarget = controlView.$el.find('.elementor-panel-tab-heading');\r\n                    if ($controlTarget.length) {\r\n                        controlView.$el.trigger('click');\r\n                        editTemplateTab_processClickOn($controlTarget[0]);\r\n                    }\r\n\r\n                });\r\n\r\n                process = true;\r\n            }\r\n            return process;\r\n        }\r\n\r\n        /**\r\n         * main operations for 'panelOnClick()'\r\n         */\r\n\r\n        // Is the EDIT BUTTON on the template tab clicked ?\r\n        if (editTemplateTab_processClickOn(target)) {\r\n            return;\r\n        }\r\n\r\n        // TEMPLATE - button save\r\n        if (editTemplateTab_processClickOnSaveBtn()) {\r\n            return;\r\n        }\r\n\r\n        // TEMPLATE - button remove\r\n        if (editTemplateTab_processClickOnRemoveBtn()) {\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    // console.log('panel', panel);\r\n    // console.log('model', model);\r\n    // console.log('view', view);\r\n\r\n    /**\r\n     * Initialization part\r\n     */\r\n    setPanelNavigationEvent();\r\n    createPreviewButton();\r\n\r\n    // set click event handler on the widget panel\r\n    panel.content.$el.on('click', panelOnClick);\r\n\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://teamtally/./src/js/admin/elementor-team-listing.js?");

/***/ }),

/***/ "./src/js/admin/module-custom-admin-notice.js":
/*!****************************************************!*\
  !*** ./src/js/admin/module-custom-admin-notice.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"displayNotice\": () => (/* binding */ displayNotice),\n/* harmony export */   \"hideNotice\": () => (/* binding */ hideNotice)\n/* harmony export */ });\nconst $ = window.jQuery;\r\n\r\n// the following functions can be applied on jQuery element\r\n// as well as on DOM element notice containers\r\n\r\n/**\r\n * Shows the notice message\r\n *\r\n * @param el\r\n * @param msg\r\n * @param msgType\r\n * @param isDismissible\r\n * @param hideAfter\r\n */\r\nfunction displayNotice(\r\n    el, msg, msgType = 'notice-success', isDismissible = false, hideAfter = 5000) {\r\n\r\n    let $el = el;\r\n\r\n    // convert to jQuery object if necessary\r\n    if (el.nodeType) {\r\n        $el = $(el);\r\n    }\r\n\r\n    // is jQuery object ?\r\n    if ($.type($el) !== 'object') {\r\n        return;\r\n    }\r\n\r\n    // is the container a message container ?\r\n    if (!$el.hasClass('notice')) {\r\n        $el = $el.find('.notice');\r\n        if (!$el.length) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    // Does it a have a message zone ?\r\n    const $msgEl = $el.find('p');\r\n    if (!$msgEl.length) {\r\n        return;\r\n    }\r\n\r\n    $msgEl.text(msg);\r\n\r\n    // Dismissible ?\r\n    if (isDismissible) {\r\n        $el.addClass('is-dismissible');\r\n    } else {\r\n        $el.removeClass('is-dismissible');\r\n    }\r\n\r\n    // set message type\r\n    $el.removeClass('notice-success notice-error');\r\n    $el.addClass(msgType);\r\n\r\n    // show notice\r\n    setVisibility($el, true);\r\n\r\n    // handle the notice auto hiding\r\n    if (hideAfter) {\r\n        setTimeout(() => {\r\n            setVisibility($el, false);\r\n        }, hideAfter);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Hides the notice message\r\n *\r\n * @param el\r\n */\r\nfunction hideNotice(el) {\r\n    setVisibility(el, false);\r\n}\r\n\r\n/**\r\n * Shows or hides the notice message\r\n *\r\n * @param el\r\n * @param isVisible\r\n */\r\nfunction setVisibility(el, isVisible = true) {\r\n\r\n    let $el = el;\r\n\r\n    // convert to jQuery object if necessary\r\n    if (el.nodeType) {\r\n        $el = $(el);\r\n    }\r\n\r\n    // is jQuery object ?\r\n    if ($.type($el) !== 'object') {\r\n        return;\r\n    }\r\n\r\n    // not a notice container ?\r\n    if (!$el.hasClass('notice')) {\r\n        $el = $el.find('.notice');\r\n        if (!$el.length) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    const isCurrentlyVisible = !$el.hasClass('is-hidden');\r\n\r\n    // abort if on same visibility\r\n    // i.e. notice visible but we ask it to be visible\r\n    // i.e. notice hidden but we ask it to be hidden\r\n    if (isVisible === isCurrentlyVisible) {\r\n        return;\r\n    }\r\n\r\n    // hide\r\n    if (!isVisible) {\r\n        $el.addClass('is-hidden');\r\n        $el.fadeOut(2000, function() {\r\n            $el.hide();\r\n        });\r\n\r\n    }\r\n\r\n    // show\r\n    else {\r\n        $el = $(el).removeClass('is-hidden');\r\n        $el.hide();\r\n        $el.fadeIn(2000);\r\n    }\r\n\r\n}\n\n//# sourceURL=webpack://teamtally/./src/js/admin/module-custom-admin-notice.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/admin/elementor-team-listing.js");
/******/ 	
/******/ })()
;